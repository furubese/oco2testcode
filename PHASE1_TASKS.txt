================================================================================
Phase 1: ローカルプロトタイプ実装タスクリスト
================================================================================

プロジェクト概要:
- CO₂濃度異常値の可視化マップ(sample_calendar.html)に、Gemini APIを利用した原因推論機能を追加
- サイドパネルUIでマーカークリック時に推論結果を表示
- JSONキャッシュでAPI呼び出しを最小化（将来のDynamoDB移行を想定）
- 将来的にはAWSのLambda移行予定だが、まずはプロトタイプ作成。

================================================================================
【バックエンド開発】Flask + Gemini API + JSON Cache
================================================================================

□ タスク1: requirements.txt 作成
  - 必要なライブラリ:
    * flask
    * flask-cors
    * google-generativeai
  - ファイル名: requirements.txt

□ タスク2: JSONキャッシュマネージャー作成
  - ファイル名: cache_manager.py
  - 機能:
    * キャッシュキー生成関数
    * JSONファイル読み込み（存在しない場合は新規作成）
    * キャッシュ取得（cache_key -> reasoning or None）
    * キャッシュ保存（cache_key, reasoning, metadata）
  - データ構造:
    {
      "cache_key": {
        "reasoning": "推論結果テキスト",
        "created_at": タイムスタンプ,
        "metadata": {地点情報}
      }
    }
  - キャッシュファイル: cache.json

□ タスク3: Gemini APIクライアント作成
  - ファイル名: gemini_client.py
  - 機能:
    * APIキー読み込み（環境変数 GEMINI_API_KEY）
    * プロンプト生成関数
    * Gemini API呼び出し関数
    * エラーハンドリング
  - プロンプト内容:
    * 緯度経度、CO₂濃度、偏差、日付、異常度を含む
    * 推論内容: 産業施設、交通、気象、地理的要因など
    * 出力形式: 日本語、簡潔（200-300文字程度）

□ タスク4: Flask APIサーバー作成
  - ファイル名: app.py
  - エンドポイント: POST /api/reasoning
  - リクエスト形式:
    {
      "lat": 35.6895,
      "lon": 139.6917,
      "co2": 418.45,
      "deviation": 6.45,
      "date": "202306",
      "severity": "high",
      "zscore": 3.2
    }
  - レスポンス形式:
    {
      "reasoning": "推論結果テキスト",
      "cached": true/false
    }
  - 処理フロー:
    1. リクエストパース
    2. キャッシュキー生成
    3. キャッシュ確認
    4. キャッシュヒット → 即座に返却
    5. キャッシュミス → Gemini API呼び出し
    6. キャッシュ保存
    7. レスポンス返却
  - CORS設定: すべてのオリジン許可（開発用）

□ タスク5: 環境変数設定ファイル作成
  - ファイル名: .env.example
  - 内容:
    GEMINI_API_KEY=your_api_key_here
    FLASK_PORT=5000
  - 実際の.envは.gitignoreに追加

================================================================================
【フロントエンド開発】HTML + JavaScript
================================================================================

□ タスク6: サイドパネルUI追加
  - 対象ファイル: sample_calendar.html
  - 実装内容:
    * 右側にスライド式サイドパネル追加
    * パネル幅: 400px
    * ヘッダー: "CO₂異常値の原因推論"
    * 閉じるボタン
    * スクロール可能なコンテンツエリア
    * 初期状態: 非表示
  - CSS追加:
    * .side-panel (position: fixed, right, transform)
    * .side-panel.open (表示状態)
    * .side-panel-content (スクロール)

□ タスク7: マーカークリック時のAPI呼び出し実装
  - 対象ファイル: sample_calendar.html (JavaScript部分)
  - 実装内容:
    * マーカークリック時のイベントリスナー追加
    * サイドパネル表示
    * 地点データをJSON形式でFlask APIへPOST
    * fetch() 使用
    * エンドポイント: http://localhost:5000/api/reasoning

□ タスク8: ローディングインジケーター追加
  - 実装内容:
    * API呼び出し中の表示
    * スピナーアニメーション or "推論中..." テキスト
    * レスポンス受信後は非表示

□ タスク9: 推論結果の表示
  - 実装内容:
    * サイドパネルに推論結果を表示
    * 地点情報（緯度経度、CO₂濃度）も併記
    * キャッシュヒットの場合は "（キャッシュ）" 表示

□ タスク10: エラーハンドリング
  - 実装内容:
    * ネットワークエラー時のメッセージ表示
    * API失敗時のメッセージ表示
    * タイムアウト設定（30秒）

================================================================================
【ドキュメント・テスト】
================================================================================

□ タスク11: README.md 作成
  - 内容:
    * プロジェクト概要
    * 必要な環境（Python 3.8+）
    * Gemini APIキー取得方法
      - Google AI Studio URL
      - 取得手順
    * セットアップ手順
      1. git clone / ファイル配置
      2. pip install -r requirements.txt
      3. .env 作成とAPIキー設定
      4. Flask起動: python app.py
      5. ブラウザで sample_calendar.html を開く
    * 使い方
      - マーカークリック → 推論結果表示
      - キャッシュの説明
    * トラブルシューティング
    * Phase 2への移行準備について

□ タスク12: .gitignore 作成/更新
  - 除外項目:
    * .env
    * cache.json
    * __pycache__/
    * *.pyc
    * .vscode/

□ タスク13: エンドツーエンドテスト
  - テスト内容:
    1. Flaskサーバー起動確認
    2. sample_calendar.html をブラウザで開く
    3. 年月選択してCO₂データ表示
    4. マーカークリック → サイドパネル表示確認
    5. 初回クリック → Gemini API呼び出し確認
    6. 同じマーカー再クリック → キャッシュヒット確認
    7. cache.json ファイル生成確認
    8. エラーケースのテスト（APIキー未設定など）

================================================================================
【完成後のファイル構成】
================================================================================

python_ecr/
├── app.py                    # Flaskサーバー（メイン）
├── cache_manager.py          # JSONキャッシュ管理
├── gemini_client.py          # Gemini API呼び出し
├── requirements.txt          # Python依存関係
├── .env                      # APIキー設定（要作成、gitignore対象）
├── .env.example              # 環境変数テンプレート
├── .gitignore                # Git除外設定
├── cache.json                # キャッシュデータ（自動生成、gitignore対象）
├── sample_calendar.html      # 修正版HTML（サイドパネル追加）
├── README.md                 # セットアップガイド
├── PHASE1_TASKS.txt          # このファイル
└── (既存のGeoJSONファイルなど)

================================================================================
【実装の優先順位】
================================================================================

1. バックエンド基盤（タスク1-4）
2. 環境変数設定（タスク5）
3. フロントエンド基盤（タスク6-7）
4. UI改善（タスク8-10）
5. ドキュメント・テスト（タスク11-13）

================================================================================
【推定作業時間】
================================================================================

バックエンド開発:        30-40分
フロントエンド開発:      20-30分
ドキュメント作成:        10-15分
テスト・デバッグ:        15-20分
--------------------------------------
合計:                    約1.5-2時間

================================================================================
【Phase 2への移行準備】
================================================================================

Phase 1で作成するJSONキャッシュ構造は、DynamoDBと互換性があります:

JSON (Phase 1):
{
  "cache_key": {
    "reasoning": "...",
    "created_at": 1234567890,
    "metadata": {...}
  }
}

DynamoDB (Phase 2):
- Partition Key: cache_key (String)
- Attributes: reasoning, created_at, metadata
- TTL: 90日（オプション）

移行時の主な変更点:
- json.load() → table.get_item()
- json.dump() → table.put_item()
- cache_manager.py → dynamodb_manager.py
- Flask → Lambda関数化
- ローカル起動 → API Gateway経由

================================================================================
【注意事項】
================================================================================

1. Gemini APIキーは必ず.envに保存し、.gitignoreに追加すること
2. cache.jsonも.gitignoreに追加（個人情報保護）
3. Flask CORSは開発用設定。本番環境では適切に制限すること
4. Gemini API利用料金に注意（無料枠: 1日60リクエスト）
5. Phase 2移行時、このコードベースを参考にLambda化すること

================================================================================
End of Phase 1 Task List
================================================================================
